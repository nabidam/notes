import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import styles from "../styles/Home.module.css";
import axios from "axios";

export default function Home() {
  const [notes, setNotes] = useState([]);

  const [editMode, setEditMode] = useState(false);
  const [editingNoteId, setEditingNoteId] = useState(null);

  const [text, setText] = useState("");
  const [completed, setCompleted] = useState(false);
  const [result, setResult] = useState("");

  useEffect(() => {
    axios
      .get(`${process.env.NEXT_PUBLIC_BASE_URL}notes/`)
      .then((response) => setNotes(response.data))
      .catch(console.error);
  }, []);

  const submitForm = () => {
    if (text == "" || text.length < 3) {
      setResult("Text can not be empty or lass than 3 character!");
      return false;
    }

    axios
      .post(`${process.env.NEXT_PUBLIC_BASE_URL}notes/`, {
        text,
        completed,
      })
      .then((response) => {
        notes.push(response.data);
        setResult("Successfully added.");
        setText("");
        setCompleted(false);
      })
      .catch((error) => {
        setResult("Something went wrong!");
        console.error("Something went wrong!", error);
      });
  };

  const deleteNote = (id) => {
    axios
      .delete(`${process.env.NEXT_PUBLIC_BASE_URL}notes/${id}/`)
      .then((response) => {
        let new_notes = notes.filter((note) => note.id != id);
        setNotes(new_notes);
        setResult("Successfully deleted.");
      })
      .catch((error) => {
        setResult("Something went wrong!");
        console.error("Something went wrong!", error);
      });
  };

  const switchEditMode = (note) => {
    setEditMode(true);

    setText(note.text);
    setCompleted(note.completed);
    setEditingNoteId(note.id);
  };

  const editNote = () => {
    if (text == "" || text.length < 3) {
      setResult("Text can not be empty or lass than 3 character!");
      return false;
    }

    axios
      .put(`${process.env.NEXT_PUBLIC_BASE_URL}notes/${editingNoteId}/`, {
        text,
        completed,
      })
      .then((response) => {
        let new_notes = notes.map((note) => {
          if (note.id == editingNoteId) {
            return {
              id: editingNoteId,
              text,
              completed,
            };
          }
          return note;
        });
        setNotes(new_notes);
        setResult("Successfully edited.");
        setEditMode(false);
        setText("");
        setCompleted(false);
        setEditingNoteId(null);
      })
      .catch((error) => {
        setResult("Something went wrong!");
        console.error("Something went wrong!", error);
      });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Notes</h1>

        <div className={styles.grid}>
          {notes.length
            ? notes.map((note, index) => (
                <a href="#" className={styles.card} key={index}>
                  <h2>{note.text}</h2>
                  <p>{note.completed ? "Is" : "Not"} Completed!</p>
                  <div className={styles.actions}>
                    <button
                      className={styles.editButton}
                      onClick={() => switchEditMode(note)}
                    >
                      edit
                    </button>
                    <button
                      className={styles.deleteButton}
                      onClick={() => deleteNote(note.id)}
                    >
                      delete
                    </button>
                  </div>
                </a>
              ))
            : ""}
        </div>
        <div className={styles.form}>
          <input
            type="text"
            className={styles.text}
            placeholder="text?"
            value={text}
            onChange={(e) => setText(e.target.value)}
          />
          <div className={styles.completedBox}>
            <label htmlFor="completed">Is it completed?</label>
            <input
              type="checkbox"
              id="completed"
              checked={completed}
              onChange={() => setCompleted(!completed)}
            />
          </div>
          {editMode ? (
            <button className={styles.editButton} onClick={editNote}>
              edit
            </button>
          ) : (
            <button className={styles.submitButton} onClick={submitForm}>
              submit
            </button>
          )}
        </div>
        {result}
        {/* text: {text}
        completed: {completed ? "true" : "false"} */}
      </main>
    </div>
  );
}
